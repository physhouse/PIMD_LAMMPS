    for(int ip=0; ip<np; ip++)
    {
      // assign the coordinates
    
      if(input.contract==1 && rmix<1E-3)
      {
        for (int i=0; i<nall; i++)
        {
           x_save[i][0] = x_rp[ip][i][0];
           x_save[i][1] = x_rp[ip][i][1];
           x_save[i][2] = x_rp[ip][i][2];
        }
      }
      else
      {
        for(int i=0; i<nall; i++) 
        {
          x_save[i][0] = 0.0;
	  x_save[i][1] = 0.0;
	  x_save[i][2] = 0.0;
        }
      
        int istart = ip * input.contract;
      
        for(int ik=0; ik<input.contract; ik++)
        {
          int j = istart + ik;	
          for(int i=0; i<nall; i++) 
          {
            x_save[i][0] += x_rp[j][i][0];
	    x_save[i][1] += x_rp[j][i][1];
	    x_save[i][2] += x_rp[j][i][2];
          }
        }
     
        double fc = ncinv * (1-rmix);
      
        for(int i=0; i<nall; i++) 
        {
           x_save[i][0] *= fc;
	   x_save[i][1] *= fc;
	   x_save[i][2] *= fc;
        }
       
        istart = ip / 2 * input.contract * 2;
        fc = ncinv * rmix * 0.5;
      
        if(np>1) for(int ik=0; ik<input.contract * 2; ik++)
        {
          int j = istart + ik;
	
          for(int i=0; i<nall; i++) 
          {
            x_save[i][0] += x_rp[j][i][0] * fc;
	    x_save[i][1] += x_rp[j][i][1] * fc;
	    x_save[i][2] += x_rp[j][i][2] * fc;
          }
        }
      
      }
   
      // zero all force values
    
      memset(&(atom->f[0][0]), 0, nall*sizeof(double)*3);
    
      // initiate timer
    
      //timer->stamp();
    
      // call force calculators
      // <!---------
 
      if (atom->molecular) {
          if (lmp_bond) lmp_bond->compute(eflag,vflag);
          if (lmp_angle) lmp_angle->compute(eflag,vflag);
          if (lmp_dihedral) lmp_dihedral->compute(eflag,vflag);
          if (lmp_improper) lmp_improper->compute(eflag,vflag);
          //timer->stamp(TIME_BOND);
      }

      // total the energy
    
      if(lmp_bond)     ebond   += lmp_bond->energy;
      if(lmp_angle)    eangle  += lmp_angle->energy;
      if(lmp_dihedral) edihed  += lmp_dihedral->energy;
      if(lmp_improper) eimp    += lmp_improper->energy;
      // -------------!>
      // final force
    
      for(int i=0; i<nall; i++)
      { 
         atom->f[i][0] *= fscale;
         atom->f[i][1] *= fscale;
         atom->f[i][2] *= fscale;
      } 
      
      if(input.contract!=1 || rmix>1E-3)
      {
         int istart = ip * input.contract;
         double fc = 1.0 - rmix;
      
         for(int ik=0; ik<input.contract; ik++)
         {
            int j = istart + ik;
	
            for(int i=0; i<nall; i++) 
            {
              f_rp[j][i][0] += f_save[i][0] * fc;
     	      f_rp[j][i][1] += f_save[i][1] * fc;
  	      f_rp[j][i][2] += f_save[i][2] * fc;
            }
         }
     
         istart = ip / 2 * input.contract * 2;
         fc = rmix * 0.5;
        
         if(np>1) for(int ik=0; ik<input.contract*2; ik++)
         {
           int j = istart + ik;
	
           for(int i=0; i<nall; i++) 
           {
             f_rp[j][i][0] += f_save[i][0] * fc;
	     f_rp[j][i][1] += f_save[i][1] * fc;
	     f_rp[j][i][2] += f_save[i][2] * fc;
           }
         }
    
      }
      else
      { 
 	 for (int i=0; i<nall; i++)
	 {
	   f_rp[ip][i][0] += f_save[i][0];
	   f_rp[ip][i][1] += f_save[i][1];
	   f_rp[ip][i][2] += f_save[i][2];
	 }
      }
    }
